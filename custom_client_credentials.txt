<dependency>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-starter-security</artifactId>
</dependency>
<dependency>
  <groupId>io.jsonwebtoken</groupId>
  <artifactId>jjwt-api</artifactId>
  <version>0.11.5</version>
</dependency>
<dependency>
  <groupId>io.jsonwebtoken</groupId>
  <artifactId>jjwt-impl</artifactId>
  <version>0.11.5</version>
  <scope>runtime</scope>
</dependency>
<dependency>
  <groupId>io.jsonwebtoken</groupId>
  <artifactId>jjwt-jackson</artifactId>
  <version>0.11.5</version>
  <scope>runtime</scope>
</dependency>


@Component
public class JwtUtil {
    private final Key key = Keys.secretKeyFor(SignatureAlgorithm.HS256);

    public String generateToken(String clientId) {
        return Jwts.builder()
                .setSubject(clientId)
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + 3600000)) // 1 hour
                .signWith(key)
                .compact();
    }

    public boolean validateToken(String token) {
        try {
            getClaims(token);
            return true;
        } catch (JwtException e) {
            return false;
        }
    }

    public String getClientId(String token) {
        return getClaims(token).getSubject();
    }

    private Claims getClaims(String token) {
        return Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(token).getBody();
    }
}


@RestController
@RequestMapping("/oauth")
public class OAuthController {
    @Autowired
    private JwtUtil jwtUtil;

    private static final Map<String, String> clients = Map.of(
        "client-app", "secret123"
    );

    @PostMapping("/token")
    public ResponseEntity<?> getToken(@RequestParam String client_id, @RequestParam String client_secret) {
        if (!clients.containsKey(client_id) || !clients.get(client_id).equals(client_secret)) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid credentials");
        }

        String token = jwtUtil.generateToken(client_id);
        return ResponseEntity.ok(Map.of("access_token", token, "token_type", "Bearer"));
    }
}


@Component
public class JwtAuthFilter extends OncePerRequestFilter {

    @Autowired
    private JwtUtil jwtUtil;

    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain filterChain) throws ServletException, IOException {

        String authHeader = request.getHeader(HttpHeaders.AUTHORIZATION);

        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            String token = authHeader.substring(7);
            if (jwtUtil.validateToken(token)) {
                String clientId = jwtUtil.getClientId(token);
                UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(
                        clientId, null, List.of(new SimpleGrantedAuthority("ROLE_CLIENT")));
                SecurityContextHolder.getContext().setAuthentication(auth);
            }
        }

        filterChain.doFilter(request, response);
    }
}


@Configuration
public class SecurityConfig {
    @Autowired
    private JwtAuthFilter jwtAuthFilter;

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        return http
            .csrf().disable()
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/oauth/token").permitAll()
                .requestMatchers("/api/secure/**").authenticated()
                .anyRequest().permitAll()
            )
            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class)
            .build();
    }
}


@RestController
@RequestMapping("/api/secure")
public class SecureApiController {

    @GetMapping("/data")
    public ResponseEntity<String> getSecureData() {
        return ResponseEntity.ok("Secure data for client");
    }
}


curl -X POST "http://localhost:8080/oauth/token?client_id=client-app&client_secret=secret123"

curl -H "Authorization: Bearer <token>" http://localhost:8080/api/secure/data


You're absolutely right ‚Äî storing and transmitting client credentials (client_id, client_secret) in a React UI (frontend) is inherently insecure, because:

The code and secrets are visible to users in DevTools, browser network tabs, or source maps.

Anyone could extract them and impersonate your app.

üîê Important Principle
Never expose secrets or sensitive credentials in client-side code.

Instead, you should shift authentication responsibility to the backend or use public-safe methods on the frontend (e.g., authorization code flow with PKCE for user-based auth).

‚úÖ Secure Alternatives
üîÅ Option 1: Let UI authenticate the user and delegate to backend
If your UI is already authenticated via a custom service (you mentioned this earlier), do not send client credentials from the UI. Instead:

UI authenticates the user via your existing mechanism.

UI sends a session/access token (e.g., JWT or session cookie) to your backend.

Backend validates the user and performs the client_id/client_secret grant to get an access token from your token issuer (or issues its own).

The backend uses this token to call protected internal APIs.

This way:

Client credentials are never exposed.

The backend is the only trusted party handling secrets.

üí° Diagram
pgsql
Copy
Edit
[User Browser]
   ‚Üì Auth (UI handles)
[React App]
   ‚Üì sends user token (session or JWT)
[Your Spring Boot Backend]
   ‚Üì uses stored client_id/secret (secured)
[OAuth Token Issuer / Internal API]
   ‚Üì returns token
[Backend Calls Internal API]
üîí Where to Store client_id and client_secret?
Keep them in backend application properties or an encrypted secrets vault (e.g., AWS Secrets Manager, HashiCorp Vault, Azure Key Vault).

Never in the frontend code or localStorage/sessionStorage.

‚ùå What not to do:
Do not put client_secret in .env files of the React app ‚Äî these get bundled.

Do not pass secrets in HTTP request bodies from the frontend.

Do not store secrets in localStorage, sessionStorage, or cookies.

‚úÖ Bonus: If You Need a Public Key Auth (No Secret)
If you absolutely need frontend ‚Üí backend auth with minimal risk and no sensitive credentials:

Use JWTs signed by the UI authentication server, verified in the backend.

Use OAuth2 PKCE (Proof Key for Code Exchange) if using a standard provider like Auth0/Okta.

