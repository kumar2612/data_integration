-- schema.sql

CREATE TABLE integration_flows (
    id INT PRIMARY KEY,
    name VARCHAR(100),
    schedule_cron VARCHAR(50),
    active BOOLEAN
);

CREATE TABLE integration_steps (
    id INT PRIMARY KEY,
    flow_id INT,
    step_order INT,
    step_type VARCHAR(50),
    config CLOB,
    condition_expr VARCHAR(255),
    on_true_step INT,
    on_false_step INT,
    parent_step_id INT,
    FOREIGN KEY (flow_id) REFERENCES integration_flows(id)
);

-- data.sql

-- Flow definition
INSERT INTO integration_flows (id, name, schedule_cron, active) VALUES (1, 'complexFlow', '0/30 * * * * ?', true);

-- Root Step: Parallel block
INSERT INTO integration_steps (id, flow_id, step_order, step_type, config, parent_step_id) 
VALUES (1, 1, 1, 'parallel', '{}', NULL);

-- Parallel children
INSERT INTO integration_steps (id, flow_id, step_order, step_type, config, parent_step_id) 
VALUES (2, 1, 1, 'sql', '{"query":"SELECT * FROM source_table1"}', 1);

INSERT INTO integration_steps (id, flow_id, step_order, step_type, config, parent_step_id) 
VALUES (3, 1, 2, 'sql', '{"query":"SELECT * FROM source_table2"}', 1);

-- Choice block after parallel
INSERT INTO integration_steps (id, flow_id, step_order, step_type, config, condition_expr, parent_step_id) 
VALUES (4, 1, 2, 'choice', '{}', '${body.size} > 0', NULL);

-- Children of choice
INSERT INTO integration_steps (id, flow_id, step_order, step_type, config, parent_step_id) 
VALUES (5, 1, 1, 'processor', '{"bean":"cleanDataProcessor"}', 4);

INSERT INTO integration_steps (id, flow_id, step_order, step_type, config, parent_step_id) 
VALUES (6, 1, 2, 'rest', '{"url":"http://localhost:8081/api/target"}', 4);

-- Loop block
INSERT INTO integration_steps (id, flow_id, step_order, step_type, config, condition_expr, parent_step_id) 
VALUES (7, 1, 3, 'loop', '{}', '${body.size < 5}', NULL);

-- Loop child
INSERT INTO integration_steps (id, flow_id, step_order, step_type, config, parent_step_id) 
VALUES (8, 1, 1, 'processor', '{"bean":"cleanDataProcessor"}', 7);

-----------------

// ParallelStepHandler.java
package com.example.dynamicrouting.route.handler;

import com.example.dynamicrouting.model.IntegrationStepConfig;
import org.apache.camel.model.RouteDefinition;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
public class ParallelStepHandler implements StepHandler {

    @Override
    public RouteDefinition apply(RouteDefinition route, IntegrationStepConfig step, List<IntegrationStepConfig> children) {
        if (children == null || children.isEmpty()) return route;

        route.split().parallelProcessing().body().process(exchange -> {
            // placeholder: pass to parallel child route via bean, enrich etc.
        });

        for (IntegrationStepConfig child : children) {
            // Register child routes by invoking handlers, or use wireTap/sendTo
        }
        return route;
    }

    @Override
    public String getStepType() {
        return "parallel";
    }
}

// ChoiceStepHandler.java
package com.example.dynamicrouting.route.handler;

import com.example.dynamicrouting.model.IntegrationStepConfig;
import org.apache.camel.model.ChoiceDefinition;
import org.apache.camel.model.RouteDefinition;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
public class ChoiceStepHandler implements StepHandler {

    @Override
    public RouteDefinition apply(RouteDefinition route, IntegrationStepConfig step, List<IntegrationStepConfig> children) {
        String condition = step.getConditionExpr();
        ChoiceDefinition choice = route.choice();

        for (IntegrationStepConfig child : children) {
            // naive match: first child as true, second as false branch
            if (children.indexOf(child) == 0) {
                choice.when().simple(condition).process(exchange -> {
                    // apply true branch logic
                });
            } else {
                choice.otherwise().process(exchange -> {
                    // apply false branch logic
                });
            }
        }

        choice.end();
        return route;
    }

    @Override
    public String getStepType() {
        return "choice";
    }
}

// LoopStepHandler.java
package com.example.dynamicrouting.route.handler;

import com.example.dynamicrouting.model.IntegrationStepConfig;
import org.apache.camel.model.RouteDefinition;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
public class LoopStepHandler implements StepHandler {

    @Override
    public RouteDefinition apply(RouteDefinition route, IntegrationStepConfig step, List<IntegrationStepConfig> children) {
        String condition = step.getConditionExpr();

        return route.loopDoWhile(simple(condition))
                    .process(exchange -> {
                        // process loop body or delegate
                    })
                .end();
    }

    @Override
    public String getStepType() {
        return "loop";
    }
}

----------------------------

package com.example.dynamicrouting.route;

import com.example.dynamicrouting.model.IntegrationFlowConfig;
import com.example.dynamicrouting.model.IntegrationStepConfig;
import com.example.dynamicrouting.repository.IntegrationFlowRepository;
import com.example.dynamicrouting.repository.IntegrationStepRepository;
import com.example.dynamicrouting.route.handler.StepHandler;
import com.example.dynamicrouting.route.handler.StepHandlerRegistry;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.model.RouteDefinition;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.*;
import java.util.stream.Collectors;

@Component
public class DynamicRouteLoader extends RouteBuilder {

    @Autowired
    private IntegrationFlowRepository flowRepository;

    @Autowired
    private IntegrationStepRepository stepRepository;

    @Autowired
    private StepHandlerRegistry stepHandlerRegistry;

    @Override
    public void configure() throws Exception {
        List<IntegrationFlowConfig> flows = flowRepository.findAllByActive(true);

        for (IntegrationFlowConfig flow : flows) {
            List<IntegrationStepConfig> allSteps = stepRepository.findByFlowIdOrderByStepOrder(flow.getId());

            // Build step tree for nesting
            Map<Integer, List<IntegrationStepConfig>> stepTree = allSteps.stream()
                .collect(Collectors.groupingBy(s -> Optional.ofNullable(s.getParentStepId()).orElse(0)));

            List<IntegrationStepConfig> rootSteps = stepTree.getOrDefault(0, Collections.emptyList());

            RouteDefinition route = from("quartz://" + flow.getName() + "?cron=" + flow.getScheduleCron())
                    .routeId(flow.getName());

            for (IntegrationStepConfig rootStep : rootSteps) {
                route = buildStepTree(route, rootStep, stepTree);
            }
        }
    }

    private RouteDefinition buildStepTree(RouteDefinition route, IntegrationStepConfig step,
                                          Map<Integer, List<IntegrationStepConfig>> stepTree) {
        StepHandler handler = stepHandlerRegistry.getHandler(step.getStepType());
        List<IntegrationStepConfig> children = stepTree.getOrDefault(step.getId(), Collections.emptyList());
        return handler.apply(route, step, children);
    }
}

------------------------------------

package com.example.dynamicrouting.route;

import com.example.dynamicrouting.model.IntegrationFlowConfig;
import com.example.dynamicrouting.model.IntegrationStepConfig;
import com.example.dynamicrouting.repository.IntegrationFlowRepository;
import com.example.dynamicrouting.repository.IntegrationStepRepository;
import com.example.dynamicrouting.route.handler.StepHandler;
import com.example.dynamicrouting.route.handler.StepHandlerRegistry;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.model.RouteDefinition;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.*;
import java.util.stream.Collectors;

@Component
public class DynamicRouteLoader extends RouteBuilder {

    @Autowired
    private IntegrationFlowRepository flowRepository;

    @Autowired
    private IntegrationStepRepository stepRepository;

    @Autowired
    private StepHandlerRegistry stepHandlerRegistry;

    @Override
    public void configure() throws Exception {
        List<IntegrationFlowConfig> flows = flowRepository.findAllByActive(true);

        for (IntegrationFlowConfig flow : flows) {
            List<IntegrationStepConfig> allSteps = stepRepository.findByFlowIdOrderByStepOrder(flow.getId());

            Map<Integer, List<IntegrationStepConfig>> stepTree = allSteps.stream()
                .collect(Collectors.groupingBy(s -> Optional.ofNullable(s.getParentStepId()).orElse(0)));

            List<IntegrationStepConfig> rootSteps = stepTree.getOrDefault(0, Collections.emptyList());

            RouteDefinition route = from("quartz://" + flow.getName() + "?cron=" + flow.getScheduleCron())
                    .routeId(flow.getName());

            for (IntegrationStepConfig rootStep : rootSteps) {
                route = buildStepTree(route, rootStep, stepTree);
            }
        }
    }

    private RouteDefinition buildStepTree(RouteDefinition route, IntegrationStepConfig step,
                                          Map<Integer, List<IntegrationStepConfig>> stepTree) {
        StepHandler handler = stepHandlerRegistry.getHandler(step.getStepType());
        List<IntegrationStepConfig> children = stepTree.getOrDefault(step.getId(), Collections.emptyList());
        return handler.apply(route, step, children);
    }
}



----------------------------

// src/main/java/com/example/dynamicrouting/route/handler/ApiLoginStepHandler.java
package com.example.dynamicrouting.route.handler;

import com.example.dynamicrouting.model.IntegrationStepConfig;
import org.apache.camel.model.RouteDefinition;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
public class ApiLoginStepHandler implements StepHandler {

    @Override
    public RouteDefinition apply(RouteDefinition route, IntegrationStepConfig step, List<IntegrationStepConfig> children) {
        String loginUrl = step.getConfigValue("url");
        String username = step.getConfigValue("username");
        String password = step.getConfigValue("password");

        return route.setHeader("Authorization", constant("Basic " + java.util.Base64.getEncoder()
                        .encodeToString((username + ":" + password).getBytes())))
                    .to(loginUrl);
    }

    @Override
    public String getStepType() {
        return "api_login";
    }
}

// src/main/java/com/example/dynamicrouting/route/handler/PaginatedApiStepHandler.java
package com.example.dynamicrouting.route.handler;

import com.example.dynamicrouting.model.IntegrationStepConfig;
import org.apache.camel.model.RouteDefinition;
import org.springframework.stereotype.Component;

import java.util.List;

import static org.apache.camel.builder.Builder.simple;

@Component
public class PaginatedApiStepHandler implements StepHandler {

    @Override
    public RouteDefinition apply(RouteDefinition route, IntegrationStepConfig step, List<IntegrationStepConfig> children) {
        String url = step.getConfigValue("url");
        String queryTemplate = step.getConfigValue("queryParamTemplate");
        String conditionExpr = step.getConfigValue("loopCondition");

        RouteDefinition loopRoute = route.loopDoWhile(simple(conditionExpr))
            .process(exchange -> {
                int offset = exchange.getProperty("offset", Integer.class) != null ? exchange.getProperty("offset", Integer.class) : 0;
                String finalUrl = url + "?" + queryTemplate.replace("${offset}", String.valueOf(offset));
                exchange.getIn().setHeader("CamelHttpUri", finalUrl);
            })
            .toD("${header.CamelHttpUri}")
            .process(exchange -> {
                int offset = exchange.getProperty("offset", Integer.class) != null ? exchange.getProperty("offset", Integer.class) : 0;
                exchange.setProperty("offset", offset + 10);
            });

        // Process child steps inside this loop
        for (IntegrationStepConfig child : children) {
            StepHandler childHandler = StepHandlerRegistry.getHandler(child.getStepType());
            loopRoute = childHandler.apply(loopRoute, child, List.of());
        }

        return loopRoute.end();
    }

    @Override
    public String getStepType() {
        return "paginated_api";
    }
}

// src/main/java/com/example/dynamicrouting/route/handler/DbUpsertStepHandler.java
package com.example.dynamicrouting.route.handler;

import com.example.dynamicrouting.model.IntegrationStepConfig;
import org.apache.camel.model.RouteDefinition;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
public class DbUpsertStepHandler implements StepHandler {

    @Override
    public RouteDefinition apply(RouteDefinition route, IntegrationStepConfig step, List<IntegrationStepConfig> children) {
        String sql = step.getConfigValue("query");

        // Use parallel processing to insert/upsert data in parallel
        return route.split().jsonpath("$[*]").parallelProcessing()
                     .to("sql:" + sql + "?dataSource=#targetDs");
    }

    @Override
    public String getStepType() {
        return "db_upsert";
    }
}

@Override
public RouteDefinition apply(RouteDefinition route, IntegrationStepConfig step) {
    JSONObject config = new JSONObject(step.getConfig());

    return route.process(exchange -> {
        ConfigResolver resolver = new ConfigResolver(exchange);

        // Resolve all top-level keys (url, method, headers, body, etc.)
        String url = resolver.resolve(config.getString("url"));
        String method = config.optString("method", "POST").toUpperCase();

        // Optional headers and body
        JSONObject headers = config.has("headers") ? resolver.resolveJson(config.getJSONObject("headers")) : new JSONObject();
        JSONObject body = config.has("body") ? resolver.resolveJson(config.getJSONObject("body")) : new JSONObject();

        // Set headers
        for (String key : headers.keySet()) {
            exchange.getIn().setHeader(key, headers.getString(key));
        }

        // Set method and URL
        exchange.getIn().setHeader(Exchange.HTTP_METHOD, method);
        exchange.getIn().setHeader(Exchange.HTTP_URI, url);

        // Set body
        exchange.getIn().setBody(body.toString());

    }).to("http://dummy") // will be overridden by Exchange.HTTP_URI
      .process(exchange -> {
          // Optional: extract token from login response and store in Exchange
          JSONObject response = new JSONObject(exchange.getMessage().getBody(String.class));

          if (response.has("token")) {
              String token = response.getString("token");
              exchange.setProperty("token", token);
          }

          // Optional: store any other fields for downstream steps
      });
}


{
  "url": "https://example.com/login",
  "method": "POST",
  "body": {
    "username": "user",
    "password": "ENC::api.password"
  }
}


{
  "url": "https://example.com/data?page=1",
  "method": "GET",
  "headers": {
    "Authorization": "Bearer ${token}"
  }
}

---------------------------------

config resolver with transform 

package com.example.dynamicrouting.util;

import org.apache.camel.Exchange;

import java.lang.reflect.Method;
import java.util.*;

public class TransformService {

    private final Map<String, Method> transformMap = new HashMap<>();

    public TransformService() {
        for (Method method : this.getClass().getDeclaredMethods()) {
            if (method.isAnnotationPresent(Transform.class)) {
                transformMap.put(method.getName(), method);
            }
        }
    }

    public String apply(String operation, String input, Exchange exchange) {
        try {
            Method method = transformMap.get(operation);
            if (method == null) return input;
            return (String) method.invoke(this, input, exchange);
        } catch (Exception e) {
            return input; // fallback silently
        }
    }

    public String applyChain(List<String> ops, String input, Exchange exchange) {
        for (String op : ops) {
            input = apply(op, input, exchange);
        }
        return input;
    }

    // === Transformations ===

    @Transform
    public String capitalize(String value, Exchange exchange) {
        if (value == null || value.isEmpty()) return value;
        return Character.toUpperCase(value.charAt(0)) + value.substring(1);
    }

    @Transform
    public String toLowerCase(String value, Exchange exchange) {
        return value != null ? value.toLowerCase() : null;
    }

    @Transform
    public String toUpperCase(String value, Exchange exchange) {
        return value != null ? value.toUpperCase() : null;
    }

    @Transform
    public String increment(String value, Exchange exchange) {
        try {
            return String.valueOf(Integer.parseInt(value) + 1);
        } catch (NumberFormatException e) {
            return value;
        }
    }

    @Transform
    public String appendToken(String value, Exchange exchange) {
        String token = exchange.getProperty("token", String.class);
        return value + "?token=" + token;
    }

    // Add more @Transform methods here...
}


package com.example.dynamicrouting.util;

import java.lang.annotation.*;

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
public @interface Transform {}


package com.example.dynamicrouting.util;

import org.apache.camel.Exchange;
import org.json.JSONArray;
import org.json.JSONObject;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class ConfigResolver {

    private final Exchange exchange;
    private final TransformService transformService;

    public ConfigResolver(Exchange exchange, TransformService transformService) {
        this.exchange = exchange;
        this.transformService = transformService;
    }

    public String resolve(String value, List<String> transforms) {
        if (value == null) return null;

        // Basic dynamic references like ${headers.userId}
        String resolved = value.replaceAll("\\$\\{([^}]+)}", match -> {
            String path = match.group(1);
            if (path.startsWith("headers.")) {
                return exchange.getIn().getHeader(path.substring(8), String.class);
            } else if (path.startsWith("properties.")) {
                return exchange.getProperty(path.substring(11), String.class);
            } else {
                return match.group(0);
            }
        });

        return transforms != null ? transformService.applyChain(transforms, resolved, exchange) : resolved;
    }

    public JSONObject resolveJson(JSONObject json) {
        JSONObject resolved = new JSONObject();
        for (String key : json.keySet()) {
            Object val = json.get(key);
            if (val instanceof JSONObject) {
                resolved.put(key, resolveJson((JSONObject) val));
            } else if (val instanceof JSONArray) {
                JSONArray array = (JSONArray) val;
                List<Object> resolvedList = IntStream.range(0, array.length())
                        .mapToObj(i -> array.get(i) instanceof JSONObject
                                ? resolveJson(array.getJSONObject(i))
                                : array.get(i))
                        .collect(Collectors.toList());
                resolved.put(key, resolvedList);
            } else {
                resolved.put(key, val); // extend to resolve if val is a String
            }
        }
        return resolved;
    }
}


{
  "url": "${headers.apiBase}/data",
  "transforms": ["appendToken", "toUpperCase"]
}


exchange.getIn().setHeader("apiBase", "https://example.com");

TransformService transformService = new TransformService();
ConfigResolver resolver = new ConfigResolver(exchange, transformService);

JSONObject config = new JSONObject(step.getConfig());

String url = resolver.resolve(config.getString("url"),
                List.of("appendToken", "toUpperCase"));


public String resolve(String value, List<String> transforms) {
    if (value == null) return null;

    String resolved = value.replaceAll("\\$\\{([^}]+)}", match -> {
        String path = match.group(1);
        String[] segments = path.split("\\.");
        if (segments.length < 2) return match.group(0); // Invalid format

        String scope = segments[0];
        String keyPath = path.substring(scope.length() + 1); // remove "scope."

        Object result = null;
        switch (scope) {
            case "headers" -> result = resolveFromMap(exchange.getIn().getHeaders(), keyPath);
            case "properties" -> result = resolveFromMap(exchange.getProperties(), keyPath);
            case "body" -> result = resolveFromBody(exchange.getIn().getBody(), keyPath);
            default -> result = match.group(0); // return as-is if unknown scope
        }

        return result != null ? result.toString() : "";
    });

    return transforms != null ? transformService.applyChain(transforms, resolved, exchange) : resolved;
}


private Object resolveFromMap(Map<String, Object> map, String keyPath) {
    String[] keys = keyPath.split("\\.");
    Object value = map;
    for (String key : keys) {
        if (value instanceof Map<?, ?> castMap) {
            value = castMap.get(key);
        } else {
            return null;
        }
    }
    return value;
}

private Object resolveFromBody(Object body, String keyPath) {
    if (body instanceof Map<?, ?> mapBody) {
        return resolveFromMap(mapBody, keyPath);
    }

    // Optionally support JSON object using Jackson or org.json
    try {
        JSONObject json = new JSONObject(body.toString());
        return resolveFromJson(json, keyPath);
    } catch (Exception e) {
        return null;
    }
}

private Object resolveFromJson(JSONObject json, String keyPath) {
    String[] keys = keyPath.split("\\.");
    Object value = json;
    for (String key : keys) {
        if (value instanceof JSONObject jsonObj && jsonObj.has(key)) {
            value = jsonObj.get(key);
        } else {
            return null;
        }
    }
    return value;
}


Updated Full Implementation with Array Index Support
java
Copy
Edit
public String resolve(String value, List<String> transforms) {
    if (value == null) return null;

    String resolved = value.replaceAll("\\$\\{([^}]+)}", match -> {
        String path = match.group(1);
        String[] segments = path.split("\\.");
        if (segments.length < 2) return match.group(0); // Invalid format

        String scope = segments[0];
        String keyPath = path.substring(scope.length() + 1);

        Object result = null;
        switch (scope) {
            case "headers" -> result = resolveFromMap(exchange.getIn().getHeaders(), keyPath);
            case "properties" -> result = resolveFromMap(exchange.getProperties(), keyPath);
            case "body" -> result = resolveFromBody(exchange.getIn().getBody(), keyPath);
            default -> result = match.group(0); // leave unresolved
        }

        return result != null ? result.toString() : "";
    });

    return transforms != null ? transformService.applyChain(transforms, resolved, exchange) : resolved;
}
🔧 Helpers (Array Support in JSON)
java
Copy
Edit
private Object resolveFromMap(Map<String, Object> map, String keyPath) {
    String[] keys = keyPath.split("\\.");
    Object value = map;
    for (String key : keys) {
        if (value instanceof Map<?, ?> castMap) {
            value = castMap.get(key);
        } else {
            return null;
        }
    }
    return value;
}

private Object resolveFromBody(Object body, String keyPath) {
    if (body instanceof Map<?, ?> mapBody) {
        return resolveFromMap(mapBody, keyPath);
    }

    try {
        JSONObject json = new JSONObject(body.toString());
        return resolveFromJson(json, keyPath);
    } catch (Exception e) {
        return null;
    }
}

private Object resolveFromJson(Object current, String keyPath) {
    String[] parts = keyPath.split("\\.");

    for (String part : parts) {
        if (current == null) return null;

        // Handle array index: e.g., "items[0]"
        if (part.matches(".+\\[\\d+\\]")) {
            String key = part.substring(0, part.indexOf('['));
            int index = Integer.parseInt(part.replaceAll(".+\\[(\\d+)]", "$1"));

            if (current instanceof JSONObject obj && obj.has(key)) {
                Object arr = obj.get(key);
                if (arr instanceof JSONArray jsonArray && jsonArray.length() > index) {
                    current = jsonArray.get(index);
                } else {
                    return null;
                }
            } else {
                return null;
            }

        } else {
            if (current instanceof JSONObject obj && obj.has(part)) {
                current = obj.get(part);
            } else {
                return null;
            }
        }
    }

    return current;
}

------

children route step decalaration

@Component
public class LoopStepHandler implements StepHandler {

    @Autowired
    private StepHandlerRegistry stepHandlerRegistry;

    @Override
    public RouteDefinition apply(RouteDefinition parentRoute, IntegrationStepConfig loopStep, StepContext context) {
        List<IntegrationStepConfig> children = context.getStepTree().getOrDefault(loopStep.getId(), List.of());

        // Dynamic child step routes
        RouteDefinition loopRoute = parentRoute;

        // Loop until condition is met
        loopRoute = loopRoute.loopDoWhile(simple("${exchangeProperty[hasMore]}"));

        // Dynamically add child steps as subroutes
        for (IntegrationStepConfig childStep : children) {
            // Get the handler for the child step dynamically from registry
            StepHandler handler = stepHandlerRegistry.getHandler(childStep.getStepType());

            // Dynamically apply the handler to this child step, passing the parent route
            loopRoute = handler.apply(loopRoute, childStep, context);
        }

        // Ensure the route completes and adds processing on completion
        loopRoute.to("mock:final");
        return loopRoute;
    }
}


@Component
public class ParallelStepHandler implements StepHandler {

    @Autowired
    private StepHandlerRegistry stepHandlerRegistry;

    @Override
    public RouteDefinition apply(RouteDefinition parentRoute, IntegrationStepConfig parallelStep, StepContext context) {
        List<IntegrationStepConfig> children = context.getStepTree().getOrDefault(parallelStep.getId(), List.of());

        // Dynamic parallel route
        RouteDefinition parallelRoute = parentRoute.multicast().parallelProcessing();

        // Dynamically add child steps to parallel processing
        for (IntegrationStepConfig childStep : children) {
            StepHandler handler = stepHandlerRegistry.getHandler(childStep.getStepType());

            // Apply handler to each child step and add to the parallel processing flow
            parallelRoute = handler.apply(parallelRoute, childStep, context);
        }

        // Final destination for parallel processing results
        parallelRoute.to("mock:parallelResult");
        return parallelRoute;
    }
}


@Component
public class ChoiceStepHandler implements StepHandler {

    @Autowired
    private StepHandlerRegistry stepHandlerRegistry;

    @Override
    public RouteDefinition apply(RouteDefinition parentRoute, IntegrationStepConfig choiceStep, StepContext context) {
        List<IntegrationStepConfig> children = context.getStepTree().getOrDefault(choiceStep.getId(), List.of());

        RouteDefinition choiceRoute = parentRoute.choice();

        // Add dynamic conditions for each child
        for (IntegrationStepConfig childStep : children) {
            StepHandler handler = stepHandlerRegistry.getHandler(childStep.getStepType());

            // Condition can be any condition logic like simple expressions or header checks
            String condition = childStep.getConfig().getString("condition");

            // Apply child step handler dynamically
            choiceRoute.when(simple(condition)).to("direct:" + childStep.getStepOrder());

            // Apply child step handler for its own logic
            choiceRoute = handler.apply(choiceRoute, childStep, context);
        }

        // Default route for choice condition if none match
        choiceRoute.otherwise().to("mock:default");

        return choiceRoute;
    }
}
